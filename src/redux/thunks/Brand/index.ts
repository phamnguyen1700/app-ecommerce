import { createAsyncThunk } from "@reduxjs/toolkit";
import {
  getBrandService,
  createBrandService,
  updateBrandService,
  deleteBrandService,
  reactiveBrandService,
  manageBrandService,
} from "@/redux/services/Brand";
import { IBrandFilter } from "@/typings/brand";
import { toast } from "sonner";

// üü¢ L·∫•y danh s√°ch th∆∞∆°ng hi·ªáu
export const getBrandThunk = createAsyncThunk(
  "brand/getAll",
  async (_, { rejectWithValue }) => {
    try {
      const response = await getBrandService();
      return response.data; // Tr·∫£ v·ªÅ danh s√°ch brands
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

// üü¢ T·∫°o th∆∞∆°ng hi·ªáu m·ªõi
export const createBrandThunk = createAsyncThunk(
  "brand/create",
  async (brandName: string, { rejectWithValue }) => {
    try {
      const response = await createBrandService(brandName);
      return response.data;
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

// üü¢ C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu
export const updateBrandThunk = createAsyncThunk(
  "brand/update",
  async (
    { brandId, brandName }: { brandId: string; brandName: string },
    { rejectWithValue }
  ) => {
    try {
      const response = await updateBrandService(brandId, brandName);
      return response.data; // Tr·∫£ v·ªÅ th∆∞∆°ng hi·ªáu ƒë√£ c·∫≠p nh·∫≠t
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

export const deleteBrandThunk = createAsyncThunk(
  "brand/delete",
  async (brandId: string) => {
    try {
      const response = await deleteBrandService(brandId);
      toast.success("Th∆∞∆°ng hi·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
      return response.data;
    } catch {
      toast.error("Kh√¥ng th·ªÉ x√≥a th∆∞∆°ng hi·ªáu ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
      return [];
    }
  }
);

// üü¢ K√≠ch ho·∫°t l·∫°i th∆∞∆°ng hi·ªáu
export const reactiveBrandThunk = createAsyncThunk(
  "brand/reactivate",
  async (brandId: string, { rejectWithValue }) => {
    try {
      const response = await reactiveBrandService(brandId);
      return response.data; // Tr·∫£ v·ªÅ k·∫øt qu·∫£ k√≠ch ho·∫°t l·∫°i
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);

// üü¢ Qu·∫£n l√Ω th∆∞∆°ng hi·ªáu (Admin)
export const manageBrandThunk = createAsyncThunk(
  "brand/manage",
  async (params: IBrandFilter, { rejectWithValue }) => {
    try {
      const response = await manageBrandService(params);
      return response.data; // Tr·∫£ v·ªÅ danh s√°ch brands c√≥ ph√¢n quy·ªÅn admin
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);
